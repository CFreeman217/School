# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep('D:/School/Finite_Elements_ME486/polemount_2Jeremiah.STEP', 
    scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-1', scale=0.0254, 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=2, combine=False, 
    dimensionality=THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-2'
    , scale=0.0254, type=DEFORMABLE_BODY)
del mdb.models['Model-1'].parts['polemount_2Jeremiah-2']
# Save by ctf365 on 2018_12_06-17.38.45; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='SS316')
mdb.models['Model-1'].materials['SS316'].Density(table=((7870.0, ), ))
mdb.models['Model-1'].materials['SS316'].Elastic(table=((190000000.0, 0.265), 
    ))
mdb.models['Model-1'].HomogeneousSolidSection(material='SS316', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].Set(cells=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'polemount_2Jeremiah-1-1', part=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'])
mdb.models['Model-1'].StaticStep(description='Face Loading and Torque', name=
    'Loading1', previous='Initial')
del mdb.models['Model-1'].parts['polemount_2Jeremiah-1']
mdb.openStep('D:/School/Finite_Elements_ME486/polemount_2Jeremiah.STEP', 
    scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-1', scale=0.0254, 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=2, combine=False, 
    dimensionality=THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-2'
    , scale=0.0254, type=DEFORMABLE_BODY)
del mdb.models['Model-1'].parts['polemount_2Jeremiah-2']
mdb.models['Model-1'].Material(name='Material-2')
mdb.models['Model-1'].materials['Material-2'].Density(table=((7870.0, ), ))
mdb.models['Model-1'].materials['Material-2'].Elastic(table=((190000000.0, 
    0.265), ))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].Set(cells=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#1c1c0 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Loading1'
    , distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BoltHoles', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=
    0.0, u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='Datum csys-2', origin=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[24], 
    CENTER), point1=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].vertices[23]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[41], 
    MIDDLE))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='Datum csys-1', 
    toName='BaseHoleCSYS')
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='Datum csys-2', 
    toName='TorqueHoleCSYS')
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#420 ]', ), ))
mdb.models['Model-1'].SurfaceTraction(createStepName='Loading1', 
    directionVector=((0.0, 0.0, 0.0), (-1.0, 0.0, 0.0)), distributionType=
    UNIFORM, field='', localCsys=mdb.models['Model-1'].rootAssembly.datums[5], 
    magnitude=6000.0, name='TorqueLoad', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, 1.0, 0.0)))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#2000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Loading1', 
    distributionType=TOTAL_FORCE, field='', magnitude=5000.0, name='FaceLoad', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-2'])
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.1)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.001)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.005)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10MH, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].generateMesh()
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10MH, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Face Load and Torque', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='FirstTry', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['FirstTry'].submit(consistencyChecking=OFF)
mdb.jobs['FirstTry']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Face Load and Torque', 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '124 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 888 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FirstTry.odb', 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 9328, 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FirstTry', 'memory': 7242.0})
mdb.jobs['FirstTry']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FirstTry'})
mdb.jobs['FirstTry']._Message(MINIMUM_MEMORY, {'minimum_memory': 2157.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FirstTry'})
mdb.Job(atTime=None, contactPrint=OFF, description='try2', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'try2', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '124 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 888 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 1848, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 7242.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 2157.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
del mdb.models['Model-1'].materials['Material-2']
# Save by ctf365 on 2018_12_06-18.28.27; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].deleteMesh()
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.075)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.0075)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['FirstTry']
del mdb.jobs['Job-2']
mdb.Job(atTime=None, contactPrint=OFF, description='Torque and Face Loading', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='TorqueFace', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['TorqueFace'].submit(consistencyChecking=OFF)
mdb.jobs['TorqueFace']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque and Face Loading', 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\TorqueFace.odb', 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 3296, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueFace', 'memory': 7242.0})
mdb.jobs['TorqueFace']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(MINIMUM_MEMORY, {'minimum_memory': 1040.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TorqueFace', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TorqueFace']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueFace'})
mdb.jobs['TorqueFace']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 18:48:11 2018', 'jobName': 'TorqueFace'})
mdb.models['Model-1'].loads['TorqueLoad'].setValues(magnitude=600000.0)
mdb.Job(atTime=None, contactPrint=OFF, description='try2', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='torqueTEST', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['torqueTEST'].submit(consistencyChecking=OFF)
mdb.jobs['torqueTEST']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'try2', 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\torqueTEST.odb', 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 8544, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'torqueTEST', 'memory': 7242.0})
mdb.jobs['torqueTEST']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(MINIMUM_MEMORY, {'minimum_memory': 1040.0, 
    'phase': STANDARD_PHASE, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'torqueTEST', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['torqueTEST']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'torqueTEST'})
mdb.jobs['torqueTEST']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:02:09 2018', 'jobName': 'torqueTEST'})
mdb.Job(atTime=None, contactPrint=OFF, description='Face Loading Only', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='FaceOnly', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['Model-1'].loads['TorqueLoad'].suppress()
mdb.jobs['FaceOnly'].submit(consistencyChecking=OFF)
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Face Loading Only', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FaceOnly.odb', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 2572, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FaceOnly', 'memory': 7242.0})
mdb.jobs['FaceOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1040.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FaceOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FaceOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:11:16 2018', 'jobName': 'FaceOnly'})
# Save by ctf365 on 2018_12_06-19.14.07; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['torqueTEST']
mdb.Job(atTime=None, contactPrint=OFF, description='Torque Only', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='TorqueOnly', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].loads['FaceLoad'].suppress()
mdb.models['Model-1'].loads['TorqueLoad'].resume()
mdb.jobs['TorqueOnly'].submit(consistencyChecking=OFF)
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque Only', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\TorqueOnly.odb', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 5048, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueOnly', 'memory': 7242.0})
mdb.jobs['TorqueOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1040.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TorqueOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TorqueOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:21:29 2018', 'jobName': 'TorqueOnly'})
mdb.models['Model-1'].FrequencyStep(description='Resonant Frequency', maxEigen=
    1000.0, name='Freq1', previous='Loading1')
mdb.models['Model-1'].steps['Freq1'].setValues(acousticCoupling=AC_OFF, 
    eigensolver=SUBSPACE, maxIterations=30, normalization=MASS, numEigen=10, 
    simLinearDynamics=OFF, vectors=18)
mdb.models['Model-1'].steps['Loading1'].suppress()
mdb.models['Model-1'].steps['Loading1'].resume()
mdb.Job(atTime=None, contactPrint=OFF, description='All Step', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='AllForce', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['AllForce'].submit(consistencyChecking=OFF)
mdb.jobs['AllForce']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'All Step', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AllForce.odb', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 9072, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AllForce', 'memory': 7242.0})
mdb.jobs['AllForce']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'AllForce'})
mdb.models['Model-1'].loads['FaceLoad'].resume()
# Save by ctf365 on 2018_12_06-19.37.58; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AllForce', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AllForce']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AllForce', 'memory': 2827.0})
mdb.jobs['AllForce']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 2, 
    'jobName': 'AllForce', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['AllForce']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:40:18 2018', 'jobName': 'AllForce'})
mdb.jobs['AllForce'].submit(consistencyChecking=OFF)
mdb.jobs['AllForce']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'All Step', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AllForce.odb', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 13268, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AllForce', 'memory': 7242.0})
mdb.jobs['AllForce']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AllForce', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AllForce']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AllForce', 'memory': 2827.0})
mdb.jobs['AllForce']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 2, 
    'jobName': 'AllForce', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['AllForce']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:51:05 2018', 'jobName': 'AllForce'})
mdb.jobs['FaceOnly'].submit(consistencyChecking=OFF)
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Face Loading Only', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FaceOnly.odb', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 1752, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FaceOnly', 'memory': 7242.0})
mdb.jobs['FaceOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FaceOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FaceOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FaceOnly', 'memory': 2827.0})
mdb.jobs['FaceOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 2, 
    'jobName': 'FaceOnly', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FaceOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 19:59:22 2018', 'jobName': 'FaceOnly'})
mdb.jobs['TorqueOnly'].submit(consistencyChecking=OFF)
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque Only', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\TorqueOnly.odb', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 4636, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueOnly', 'memory': 7242.0})
mdb.jobs['TorqueOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueOnly'})
# Save by ctf365 on 2018_12_06-20.14.02; build 2018 2017_11_07-11.21.41 127140
# Save by ctf365 on 2018_12_06-20.15.38; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TorqueOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TorqueOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueOnly', 'memory': 2827.0})
mdb.jobs['TorqueOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueOnly'})
mdb.models['Model-1'].loads['TorqueLoad'].suppress()
mdb.jobs['FaceOnly'].submit(consistencyChecking=OFF)
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'FaceOnly'})
mdb.jobs['TorqueOnly']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['FaceOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Face Loading Only', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FaceOnly.odb', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 10556, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FaceOnly', 'memory': 7242.0})
mdb.jobs['FaceOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FaceOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FaceOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FaceOnly', 'memory': 2827.0})
mdb.jobs['FaceOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 2, 
    'jobName': 'FaceOnly', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['FaceOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FaceOnly'})
mdb.jobs['FaceOnly']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 20:27:56 2018', 'jobName': 'FaceOnly'})
mdb.models['Model-1'].loads['FaceLoad'].suppress()
mdb.models['Model-1'].loads['TorqueLoad'].resume()
mdb.jobs['TorqueOnly'].submit(consistencyChecking=OFF)
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque Only', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\TorqueOnly.odb', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 10116, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueOnly', 'memory': 7242.0})
mdb.jobs['TorqueOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueOnly'})
del mdb.jobs['TorqueFace']
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'TorqueOnly', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['TorqueOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STEP, {'stepName': 'Resonant Frequency', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'TorqueOnly', 'memory': 2827.0})
mdb.jobs['TorqueOnly']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(MINIMUM_MEMORY, {'minimum_memory': 453.0, 
    'phase': STANDARD_PHASE, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 2, 
    'jobName': 'TorqueOnly', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['TorqueOnly']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'TorqueOnly'})
mdb.jobs['TorqueOnly']._Message(JOB_COMPLETED, {
    'time': 'Thu Dec  6 20:38:09 2018', 'jobName': 'TorqueOnly'})
# Save by ctf365 on 2018_12_06-20.40.09; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['AllForce'].submit(consistencyChecking=OFF)
mdb.jobs['AllForce']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE364LAB-13', 'handle': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'All Step', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '755 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 400 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AllForce.odb', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE364LAB-13', 'handle': 6732, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(STEP, {'stepName': 'Face Loading and Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AllForce', 'memory': 7322.0})
mdb.jobs['AllForce']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8135.0, 'jobName': 'AllForce'})
mdb.jobs['AllForce']._Message(MINIMUM_MEMORY, {'minimum_memory': 1045.0, 
    'phase': STANDARD_PHASE, 'jobName': 'AllForce'})
mdb.models['Model-1'].loads['FaceLoad'].resume()
# Save by ctf365 on 2018_12_10-12.50.26; build 2018 2017_11_07-11.21.41 127140
