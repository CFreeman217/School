# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep('E:/School/Finite_Elements_ME486/polemount_2Jeremiah.STEP', 
    scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].PartFromGeometryFile(bodyNum=2, combine=False, 
    dimensionality=THREE_D, geometryFile=mdb.acis, name='polemount_2Jeremiah-2'
    , type=DEFORMABLE_BODY)
# Save by ctf365 on 2018_12_02-16.53.37; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='SS316')
mdb.models['Model-1'].materials['SS316'].Elastic(table=((190000000.0, 0.265), 
    ))
mdb.models['Model-1'].materials['SS316'].Density(table=((7870.0, ), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='SS316', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].Set(cells=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].SectionAssignment(offset=
    0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].sets['Set-1'], 
    sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].StaticStep(description='TorqueFaceLoading', name='Step-1'
    , previous='Initial')
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'polemount_2Jeremiah-1-1', part=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'])
del mdb.models['Model-1'].parts['polemount_2Jeremiah-2']
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#2000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=5000.0, name='FaceLoad', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].loads['FaceLoad'].setValues(distributionType=TOTAL_FORCE)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#420 ]', ), ))
mdb.models['Model-1'].SurfaceTraction(createStepName='Step-1', directionVector=
    ((1.0, 0.0, 0.0), (2.0, 0.0, 0.0)), distributionType=UNIFORM, field='', 
    localCsys=None, magnitude=6000.0, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-2'], traction=GENERAL)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#141c0 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='boltHoles', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
del mdb.models['Model-1'].boundaryConditions['boltHoles']
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#1c1c0 ]', ), ), name='Set-2')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-2'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
del mdb.models['Model-1'].loads['Load-2']
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].faces.getSequenceFromMask(
    ('[#420 ]', ), ))
mdb.models['Model-1'].SurfaceTraction(createStepName='Step-1', directionVector=
    ((1.0, 0.0, 0.0), (2.0, 0.0, 0.0)), distributionType=UNIFORM, field='', 
    localCsys=None, magnitude=6000.0, name='TorqueLoad', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-3'])
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='TorqueAxis', origin=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[24], 
    CENTER), point1=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[41], 
    MIDDLE), point2=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].vertices[23])
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (1.0, 0.0, 0.0)), localCsys=
    mdb.models['Model-1'].rootAssembly.datums[9])
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, -0.707106781186547, 0.707106781186547)))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.1)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setMeshControls(regions=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setMeshControls(elemShape=
    TET, regions=
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['polemount_2Jeremiah-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Torque and Face', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='Job-1', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque and Face', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '9 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 240 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\School\\Finite_Elements_ME486\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 216, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepName': 'TorqueFaceLoading', 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 361.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 67.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'increment': 1, 
    'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 'jobName': 'Job-1', 
    'severe': 0, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'jobName': 'Job-1', 
    'time': 'Thu Dec  6 16:51:42 2018'})
del mdb.models['Model-1'].rootAssembly.features['Datum csys-1']
del mdb.models['Model-1'].rootAssembly.features['TorqueAxis']
mdb.models['Model-1'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].vertices[20]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].vertices[19])
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='TorqueAxis', origin=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[24], 
    CENTER), point1=mdb.models['Model-1'].rootAssembly.datums[10], point2=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[41], 
    MIDDLE))
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, 1.0, 0.0)))
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, 0.0, 1.0)))
del mdb.models['Model-1'].rootAssembly.features['TorqueAxis']
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='TorqueCSYS', origin=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[24], 
    CENTER), point1=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].vertices[23]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['polemount_2Jeremiah-1-1'].edges[41], 
    MIDDLE))
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, 0.0, 1.0)), localCsys=
    mdb.models['Model-1'].rootAssembly.datums[12])
mdb.models['Model-1'].loads['TorqueLoad'].setValues(directionVector=((0.0, 0.0, 
    0.0), (0.0, 1.0, 0.0)))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Torque and Face', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '9 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 240 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE464LAB-02', 'handle': 848, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'TorqueFaceLoading', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 361.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8047.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 67.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Dec  6 17:33:29 2018', 
    'jobName': 'Job-1'})
# Save by ctf365 on 2018_12_06-17.36.16; build 2018 2017_11_07-11.21.41 127140
