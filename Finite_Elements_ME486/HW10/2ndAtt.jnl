# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 1.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 1.0), point2=(
    1.2, 1.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.2, 1.0), point2=(
    1.2, 2.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.2, 2.5), point2=(
    3.0, 2.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(3.0, 2.5), point2=(
    3.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(3.0, 0.0), point2=(
    0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -1.25897669792175, 0.590408563613892), value=1.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.566332578659058, 3.08718204498291), value=1.2, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    1.41155004501343, -0.63103449344635), value=3.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    3.76736831665039, 1.34482944011688), value=2.5, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches.changeKey(fromName='__profile__', toName=
    'pocket')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(1.25419580936432, 1.22807377576828))
mdb.models['Model-1'].sketches['__profile__'].retrieveSketch(sketch=
    mdb.models['Model-1'].sketches['pocket'])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9]), vector=(1.2, 
    1.2312388420105))
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9]), vector=(
    0.0541958093643198, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='pocket', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['pocket'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(1.1, 1.1))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.8, 0.8))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], radius=0.9, 
    textPoint=(2.32615542411804, -1.12382292747498))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=1.0, 
    textPoint=(2.36574912071228, -0.57015073299408))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 1.0), point2=(
    0.0, 0.9))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -1.0), point2=(
    0.0, -0.9))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], point1=(
    -0.376971572637558, -0.797979235649109))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -0.465536683797836, -0.889389991760254))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='gasket', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['gasket'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(1.7, 1.15))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.715994119644165, 0.616289734840393), value=1.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.808379888534546, -0.299905896186829), value=1.5, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='tool', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['tool'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='gasket-1', 
    part=mdb.models['Model-1'].parts['gasket'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='pocket-1', 
    part=mdb.models['Model-1'].parts['pocket'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='tool-1', part=
    mdb.models['Model-1'].parts['tool'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pocket-1', ), 
    vector=(-1.254196, -2.231239, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('gasket-1', ), 
    vector=(0.0, 1.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('tool-1', ), vector=
    (0.0, 1.85, 0.0))
mdb.models['Model-1'].Material(name='BRASS')
mdb.models['Model-1'].materials['BRASS'].Elastic(table=((16000000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='BRASS', name=
    'Section-1', thickness=1.0)
del mdb.models['Model-1'].sections['Section-1']
mdb.models['Model-1'].HomogeneousSolidSection(material='BRASS', name=
    'Section-1', thickness=1.0)
del mdb.models['Model-1'].sections['Section-1']
mdb.models['Model-1'].HomogeneousSolidSection(material='BRASS', name=
    'Section-1', thickness=None)
del mdb.models['Model-1'].sections['Section-1']
mdb.models['Model-1'].HomogeneousSolidSection(material='BRASS', name=
    'Section-1', thickness=1.0)
mdb.models['Model-1'].parts['gasket'].Set(faces=
    mdb.models['Model-1'].parts['gasket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['gasket'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['gasket'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Elastic(table=((30000000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name=
    'Section-2', thickness=1.0)
mdb.models['Model-1'].parts['pocket'].Set(faces=
    mdb.models['Model-1'].parts['pocket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['pocket'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['pocket'].sets['Set-1'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].sections.changeKey(fromName='Section-1', toName=
    'gasketSection')
mdb.models['Model-1'].sections.changeKey(fromName='Section-2', toName=
    'pocketSection')
mdb.models['Model-1'].parts['pocket'].Set(faces=
    mdb.models['Model-1'].parts['pocket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-2')
mdb.models['Model-1'].parts['pocket'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['pocket'].sets['Set-2'], sectionName=
    'pocketSection', thicknessAssignment=FROM_SECTION)
del mdb.models['Model-1'].parts['pocket'].sectionAssignments[0]
mdb.models['Model-1'].parts['gasket'].Set(faces=
    mdb.models['Model-1'].parts['gasket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-2')
mdb.models['Model-1'].parts['gasket'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['gasket'].sets['Set-2'], sectionName=
    'gasketSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['gasket'].Set(faces=
    mdb.models['Model-1'].parts['gasket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-3')
mdb.models['Model-1'].parts['gasket'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['gasket'].sets['Set-3'], sectionName=
    'gasketSection', thicknessAssignment=FROM_SECTION)
del mdb.models['Model-1'].parts['gasket'].sectionAssignments[0]
del mdb.models['Model-1'].parts['gasket'].sectionAssignments[1]
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name=
    'toolSection', thickness=1.0)
mdb.models['Model-1'].parts['tool'].Set(faces=
    mdb.models['Model-1'].parts['tool'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['tool'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['tool'].sets['Set-1'], sectionName=
    'toolSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(description='Gasket Set', initialInc=0.1, 
    maxInc=0.1, minInc=1e-05, name='Squish', previous='Initial')
mdb.models['Model-1'].ContactProperty('someFriction')
mdb.models['Model-1'].interactionProperties['someFriction'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.15, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].ContactStd(createStepName='Initial', name='Int-1')
mdb.models['Model-1'].interactions['Int-1'].includedPairs.setValuesInStep(
    stepName='Initial', useAllstar=ON)
mdb.models['Model-1'].interactions['Int-1'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'someFriction'), ), stepName='Initial')
# Save by ctf365 on 2018_12_02-17.40.46; build 2018 2017_11_07-11.21.41 127140
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['pocket-1'].edges.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['gasket-1'].edges.getSequenceFromMask(
    mask=('[#12 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['tool-1'].edges.getSequenceFromMask(
    mask=('[#8 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='xFix', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=SET, u2=UNSET, 
    ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['tool-1'].edges.getSequenceFromMask(
    ('[#4 ]', ), ), name='Set-2')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Squish', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'yTool', region=mdb.models['Model-1'].rootAssembly.sets['Set-2'], u1=UNSET, 
    u2=-0.5, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['pocket-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-3')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Squish', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'yPocket', region=mdb.models['Model-1'].rootAssembly.sets['Set-3'], u1=
    UNSET, u2=0.0, ur3=UNSET)
mdb.models['Model-1'].parts['tool'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['tool'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['tool'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['tool'].generateMesh()
mdb.models['Model-1'].parts['tool'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4I, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['tool'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.19, name='__profile__', 
    sheetSize=7.81, transform=
    mdb.models['Model-1'].parts['pocket'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['pocket'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(3.038406, 2.323344, 
    0.0)))
mdb.models['Model-1'].parts['pocket'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.58421019063568, 
    -0.0921051579895003), point2=(-0.58421019063568, -1.09210515794784))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].parts['pocket'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['pocket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['pocket'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['pocket'].faces.getSequenceFromMask(('[#3 ]', 
    ), ), technique=STRUCTURED)
mdb.models['Model-1'].parts['pocket'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['pocket'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4I, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['pocket'].faces.getSequenceFromMask(('[#3 ]', 
    ), ), ))
mdb.models['Model-1'].parts['pocket'].generateMesh()
mdb.models['Model-1'].parts['gasket'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['gasket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), technique=STRUCTURED)
mdb.models['Model-1'].parts['gasket'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['gasket'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['gasket'].edges.getSequenceFromMask(('[#12 ]', 
    ), ), number=3)
mdb.models['Model-1'].parts['gasket'].generateMesh()
mdb.models['Model-1'].parts['gasket'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4I, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['gasket'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Gasket Insertion Process', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='Job-1', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'KC-SCE364LAB-03', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Gasket Insertion Process', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'KC-SCE364LAB-03', 'handle': 11988, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Gasket Set', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8135.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.8, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'Job-1', 'severe': 12, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.825, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 9, 'stepTime': 0.825, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.8625, 'attempts': 1, 
    'timeIncrement': 0.0375, 'increment': 10, 'stepTime': 0.8625, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.91875, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 11, 'stepTime': 0.91875, 'step': 1, 
    'jobName': 'Job-1', 'severe': 14, 'iterations': 18, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9609375, 'attempts': 1, 
    'timeIncrement': 0.0421875, 'increment': 12, 'stepTime': 0.9609375, 
    'step': 1, 'jobName': 'Job-1', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0390625, 'increment': 13, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 4, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Dec  2 17:50:17 2018', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['pocket'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['pocket'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['pocket'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['pocket'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
# Save by ctf365 on 2018_12_02-18.08.29; build 2018 2017_11_07-11.21.41 127140
